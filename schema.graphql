type Koyo @entity {
  id: ID!
  poolCount: Int!
  pools: [Pool!] @derivedFrom(field: "vaultID")

  totalLiquidity: BigDecimal!
  totalSwapCount: BigInt!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!

  address: Bytes!
}

type Account @entity {
  id: ID!

  address: Bytes!

  internalBalances: [AccountInternalBalance!] @derivedFrom(field: "account")

  " Liquidity gauges this account contributed to "
  gauges: [GaugeLiquidity!] @derivedFrom(field: "user")
  "  "
  gaugeWeightVotes: [GaugeWeightVote!] @derivedFrom(field: "user")
}

type AccountInternalBalance @entity {
  id: ID!
  account: Account
  token: Bytes!
  balance: BigDecimal!
  balanceRaw: BigInt!
}

type Token @entity {
  id: ID!
  symbol: String
  name: String
  decimals: Int!
  address: String!
  totalBalanceUSD: BigDecimal! # total balance of tokens across balancer
  totalBalanceNotional: BigDecimal!
  totalVolumeUSD: BigDecimal! # total volume in fiat (usd)
  totalVolumeNotional: BigDecimal!
  totalSwapCount: BigInt!
  latestPrice: LatestPrice # latest price of token, updated when pool liquidity changes
}

type TradePair @entity {
  " Token Address - Token Address "
  id: ID!
  token0: Token!
  token1: Token!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
}

type LatestPrice @entity {
  id: ID!
  asset: Bytes!
  pricingAsset: Bytes! # address of stable asset
  poolId: Pool! # last pool which set price
  price: BigDecimal! # all the latest prices
  block: BigInt! # last block that prices were updated
}

type TokenPrice @entity {
  id: ID! # address of token + address of stablecoin-poolId
  poolId: Pool!
  asset: Bytes!
  amount: BigDecimal!
  " Address of stable asset "
  pricingAsset: Bytes!
  price: BigDecimal!
  block: BigInt!
  timestamp: Int!
}

enum InvestType {
  Join
  Exit
}

type JoinExit @entity {
  id: ID!
  type: InvestType!
  sender: Bytes!
  amounts: [BigDecimal!]!
  pool: Pool!
  account: Account!
  timestamp: Int!
  tx: Bytes!
}

type Pool @entity {
  id: ID!
  address: Bytes!
  poolType: String
  factory: Bytes
  strategyType: Int!
  symbol: String
  name: String
  swapEnabled: Boolean!
  swapFee: BigDecimal!
  owner: Account

  totalWeight: BigDecimal
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalLiquidity: BigDecimal!
  totalShares: BigDecimal!

  totalSharesRaw: BigInt!

  createTime: Int!
  swapsCount: BigInt!
  holdersCount: BigInt!

  vaultID: Koyo!
  tx: Bytes

  tokensList: [Bytes!]!

  tokens: [PoolToken!] @derivedFrom(field: "poolId")
  swaps: [Swap!] @derivedFrom(field: "poolId")
  shares: [PoolShare!] @derivedFrom(field: "poolId")
  historicalValues: [PoolHistoricalLiquidity!] @derivedFrom(field: "poolId")
}

type PoolHistoricalLiquidity @entity {
  id: ID!
  poolId: Pool!
  poolTotalShares: BigDecimal!
  poolLiquidity: BigDecimal! # total value, priced in the stable asset - ie USD
  poolShareValue: BigDecimal!
  pricingAsset: Bytes! # address of stable asset
  block: BigInt!
}

type PoolToken @entity {
  id: ID!
  poolId: Pool!
  token: Token!
  symbol: String!
  name: String!
  decimals: Int!
  address: String!
  priceRate: BigDecimal!
  balance: BigDecimal!
  balanceRaw: BigInt!
  invested: BigDecimal!

  # WeightedPool Only
  weight: BigDecimal
}

type PoolShare @entity {
  id: ID!
  account: Account!
  poolId: Pool!
  balance: BigDecimal!
  balanceRaw: BigInt!
}

type Swap @entity {
  id: ID!
  caller: Bytes!
  tokenIn: Bytes!
  tokenInSym: String!
  tokenOut: Bytes!
  tokenOutSym: String!
  tokenAmountIn: BigDecimal!
  tokenAmountOut: BigDecimal!
  # valueUSD: BigDecimal!
  poolId: Pool!
  account: Account!
  timestamp: Int!
  tx: Bytes!
}

type Gauge @entity {
  id: ID!
  address: Bytes!
  type: GaugeType!
  killed: Boolean!

  name: String!
  symbol: String!

  created: BigInt!
  createdAtBlock: BigInt!
  createdAtTransaction: Bytes!

  weights: [GaugeWeight!] @derivedFrom(field: "gauge")

  weightVotes: [GaugeWeightVote!] @derivedFrom(field: "gauge")
}

type GaugeWeight @entity {
  id: ID!
  gauge: Gauge!
  time: BigInt!
  weight: BigDecimal!
}

type GaugeWeightVote @entity {
  id: ID!
  gauge: Gauge!
  user: Account!
  time: BigInt!
  weight: BigDecimal!
}

type GaugeType @entity {
  id: ID!
  name: String!
  gaugeCount: BigInt!
  gauges: [Gauge!] @derivedFrom(field: "type")
  weights: [GaugeTypeWeight!] @derivedFrom(field: "type")
}

type GaugeTypeWeight @entity {
  id: ID!
  type: GaugeType!
  time: BigInt!
  weight: BigDecimal!
}

type GaugeTotalWeight @entity {
  id: ID!
  time: BigInt!
  weight: BigDecimal!
}

type GaugeLiquidity @entity {
  id: ID!
  user: Account!
  gauge: Gauge!
  originalBalance: BigInt!
  originalSupply: BigInt!
  workingBalance: BigInt!
  workingSupply: BigInt!
  timestamp: BigInt!
  block: BigInt!
  transaction: Bytes!
}

type GaugeDeposit @entity {
  id: ID!
  gauge: Gauge!
  provider: Account!
  value: BigDecimal!
}

type GaugeWithdraw @entity {
  id: ID!
  gauge: Gauge!
  provider: Account!
  value: BigDecimal!
}
